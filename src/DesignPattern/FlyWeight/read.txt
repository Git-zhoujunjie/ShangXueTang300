

享元模式：
  场景：
    -如果有很多完全相同或相似的对象，就可以利用享元模式，节省内存

  核心：
    -享元模式以共享的方式高效的支持大量细粒度的对象
    -享元模式能做到共享的关键是区分了内部状态和外部状态
      -内部状态：可以共享，不会随环境变化而改变
      -外部状态：不可以共享，会随环境变化而改变


  应用场景：
    -享元模式由于其共享的特性，可以在任何“池”中操作，如：线程池、数据库连接池
    -String类的设计

  优点：
    -极大减少内存对象的数量
  缺点：
    -以时间换空间